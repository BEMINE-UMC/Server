// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String  @unique @db.VarChar(100)
  password  String  @db.VarChar(255)
  name      String  @db.VarChar(30)
  photo     String?  @db.VarChar(255)
  introduction String? @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt DateTime? @db.DateTime(6) @map("updated_at")

  posts     Post[]
  likedPosts LikedPost[]
  scrapPosts ScrapPost[]
  templates Template[]
  userHistories UserHistory[]
  recentViews RecentViewPost[]
  likedTemplates LikedTemplate[]
  templateSurveys TemplateSurvey[]

  @@map("user")
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  categoryId Int     @map("category_id")
  title     String?  @db.VarChar(120)
  body      String?  @db.Text
  thumbnail String?  @db.VarChar(255)
  image String?  @db.VarChar(255)
  status    String?  @db.VarChar(50) @map("status")
  inactiveDate  DateTime? @db.DateTime(6) @map("inactive_date")
  createdAt DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt DateTime? @db.DateTime(6) @map("updated_at")

  user      User     @relation(fields: [userId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id])

  likedPosts LikedPost[]
  scrapPosts ScrapPost[]
  recentViews RecentViewPost[]

  @@map("post")
}

model Category {
  id   Int     @id @default(autoincrement()) @db.Int
  name String? @db.VarChar(50)

  posts Post[]

  @@map("category")
}

model LikedPost {
  id        Int      @id @default(autoincrement()) @db.Int
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  status    Boolean? @map("status")
  createdAt DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt DateTime? @db.DateTime(6) @map("updated_at")

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("liked_post")
}

model ScrapPost {
  id        Int      @id @default(autoincrement()) @db.Int
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  status    Boolean?  @map("status")
  createdAt DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt DateTime? @db.DateTime(6) @map("updated_at")

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("scrap_post")
}

model Template {
  id            Int      @id @default(autoincrement()) @db.Int
  userId        Int      @map("user_id")
  tCategoryId  Int      @map("t_categoryId")
  title         String  @db.VarChar(120)
  filePPT       String?  @db.VarChar(255) @map("file_ppt")
  filePDF       String?  @db.VarChar(255) @map("file_pdf")
  fileShareState String  @db.VarChar(10) @map("file_share_state")
  thumbnail     String?  @db.VarChar(255)
  status        String?  @db.VarChar(50) @map("status")
  inactiveDate  DateTime? @db.DateTime(6) @map("inactive_date")
  createdAt     DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt     DateTime? @db.DateTime(6) @map("updated_at")

  user          User     @relation(fields: [userId], references: [id])
  templateCategory TemplateCategory @relation(fields: [tCategoryId], references: [id])
  likedTemplates LikedTemplate[]
  templateSurveys TemplateSurvey[]

  @@map("template")
}

model TemplateCategory{
    id          Int     @id @default(autoincrement())
    name        String  @db.VarChar(50)

    templates Template[]

    @@map("template_category")
}

model LikedTemplate {
  id          Int      @id @default(autoincrement()) @db.Int
  templateId  Int      @map("template_id")
  userId      Int      @map("user_id")
  status      Boolean?  @map("status")
  createdAt   DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt   DateTime? @db.DateTime(6) @map("updated_at")

  template    Template @relation(fields: [templateId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("liked_template")
}

model UserHistory {
  id        Int      @id @default(autoincrement()) @db.Int
  userId    Int      @map("user_id")
  title     String?  @db.VarChar(80)
  body      String?  @db.VarChar(350)
  createdAt DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt DateTime? @db.DateTime(6) @map("updated_at")

  user      User     @relation(fields: [userId], references: [id])

  @@map("user_history")
}

model RecentViewPost {
  id        Int      @id @default(autoincrement()) @db.Int
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  createdAt DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt DateTime? @db.DateTime(6) @map("updated_at")

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("recent_view_post")
}

model Ad {
  id        Int      @id @default(autoincrement())
  title     String  @db.VarChar(10)
  body      String  @db.Text
  thumbnail String?  @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt DateTime? @db.DateTime(6) @map("updated_at")

  @@map("ad")
}

model TemplateSurvey {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  templateId Int      @map("template_id")
  starCount  Int      @map("star_count")
  content    String   @db.Text
  createdAt  DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt  DateTime? @db.DateTime(6) @map("updated_at")

  user       User     @relation(fields: [userId], references: [id])
  template   Template @relation(fields: [templateId], references: [id])

  @@map("template_survey")
}
